/***********************************************************************************************
	created: 		2021-01-02

	author:			chensong

	purpose:		239. 滑动窗口最大值
我可能会遇到很多的人，听他们讲好2多的故事，我来写成故事或编成歌，用我学来的各种乐器演奏它??
然后还可能在一个国家遇到一个心仪我的姑娘，她可能会被我帅气的外表捕获，又会被我深邃的内涵吸引，在某个下雨的夜晚，她会全身淋透然后要在我狭小的住处换身上的湿衣服??
3小时候后她告诉我她其实是这个国家的公主，她愿意向父皇求婚。我不得已告诉她我是穿越而来的男主角，我始终要回到自己的世界??
然后我的身影慢慢消失，我看到她眼里的泪水，心里却没有任何痛苦，我才知道，原来我的心被丢掉了，我游历全世界的原因，就是要找回自己的本心??
于是我开始有意寻找各种各样失去心的人，我变成一块砖头，一颗树，一滴水，一朵白云，去听大家为什么会失去自己的本心??
我发现，刚出生的宝宝，本心还在，慢慢的，他们的本心就会消失，收到了各种黑暗之光的侵蚀??
从一次争论，到嫉妒和悲愤，还有委屈和痛苦，我看到一只只无形的手，把他们的本心扯碎，蒙蔽，偷走，再也回不到主人都身边??
我叫他本心猎手。他可能是和宇宙同在的级??但是我并不害怕，我仔细回忆自己平淡的一??寻找本心猎手的痕迹??
沿着自己的回忆，一个个的场景忽闪而过，最后发现，我的本心，在我写代码的时候，会回来??
安静，淡然，代码就是我的一切，写代码就是我本心回归的最好方式，我还没找到本心猎手，但我相信，顺着这个线索，我一定能顺藤摸瓜，把他揪出来??
************************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <map>
#include <iostream>
//#include <unoreded_map>
#include <vector>


using namespace std;
template <class _Tp>
struct  cless : binary_function<_Tp, _Tp, bool>
{
    bool operator()(const _Tp& __x, const _Tp& __y) const
    {return __x > __y;}
};

class Solution {
        public:
        vector<int> maxSlidingWindow(vector<int>& nums, int k) {

            /**
     * Note: The returned array must be malloced, assume caller calls free().
     *//*
int* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize)*/
            // for(int i = 0; i < numsSize; ++i)
            // {
            //     if(i != 0)
            //     {
            //         printf(", ");
            //     }
            //     printf("%d", nums[i]);
            // }
            /* *returnSize = numsSize - k + 1;
             int *arrays = malloc(sizeof(int) * (*returnSize));
             memset(arrays, 0, sizeof(int) * (*returnSize));
             */
            std::vector<int> arrays(nums.size() -k+1);
            // std::unordered_map<int, int> count_map;
            std::map<int, int, cless<int>> count_map;
            int index = 0;
            int *circle = static_cast<int*>(malloc(sizeof(int) *k));
            for (int i = 0; k <= static_cast<int>(nums.size())&&i < k; ++i)
            {
                circle[i%k]=nums[i];
                ++count_map[circle[i%k]];
                if (i == index)
                {
                    arrays[index] = nums[i];
                }
                if (arrays[index]<nums[i])
                {
                    arrays[index] = nums[i];
                }
            }
            ++index;
            int max = arrays[0];/*
    for (const std::pair<const int, int> & pair_: count_map)
        {
            printf("%d, ", pair_.first);
        }
        printf("]\n");*/
            for (int i = k; i < static_cast<int>(nums.size()); ++i)
            {

                int cur_nums = circle[i%k];
                circle[i%k] = nums[i];
                // --count_map[cur_nums];
                if (--count_map[cur_nums]<1)
                {
                    // printf("delete === %d\n", cur_nums);
                    count_map.erase(cur_nums);
                }
                ++count_map[nums[i]];/*
        for (const std::pair<const int, int> & pair_: count_map)
        {
            printf("%d, ", pair_.first);
        }
        printf("]\n");*/
                if (k>1)
                {
                    if (cur_nums == max && max>nums[i] )
                    {
                        for (const std::pair<const int, int> & pair_: count_map)
                        {
                            max = pair_.first;
                            break;
                        }

                    }
                    else if (max<nums[i])
                    {
                        max = nums[i];
                    }
                    // else if ()
                }
                else
                {
                    max = nums[i];
                }
                arrays[index++] = max;
            }
//            printf("nums= %u, size = %u\n", nums.size(), count_map.size());
            free(circle);
            circle = NULL;
            return arrays;
        }


};


int main(int argc, char *argv[])
{
    printf("[1,3,-1,-3,5,3,6,7]\n");
    std::vector<int> arrays{1,3,-1,-3,5,3,6,7};
    int k = 3;
    Solution solution;
    std::vector<int>  ret = solution.maxSlidingWindow(arrays, k);
    printf("[");
    for (const int& value : ret)
    {
        printf("%d, ", value);
    }
    printf("]\n");
    return EXIT_SUCCESS;
}